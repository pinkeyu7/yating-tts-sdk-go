# options for analysis running
run:
    # default concurrency is a available CPU number
    concurrency: 4
    # timeout for analysis, e.g. 30s, 5m, default is 1m
    timeout: 5m
    # exit code when at least one issue was found, default is 1
    issues-exit-code: 1
    # include test files or not, default is true
    tests: true
    # list of build tags, all linters use it. Default is empty list.
    #build-tags:
    #  - integration

    # which dirs to skip: issues from them won't be reported;
    # can use regexp here: generated.*, regexp is applied on full path;
    # default value is empty list, but default dirs are skipped independently
    # from this option's value (see skip-dirs-use-default).
    # "/" will be replaced by current OS file path separator to properly work
    # on Windows.
    #skip-dirs:
    #  - 'pkg/microsoft/ews/xml/*'
    #  - test/testdata_etc
    #  - internal/cache
    #  - internal/renameio
    #  - internal/robustio

    # which files to skip: they will be analyzed, but issues from them
    # won't be reported. Default value is empty list, but there is
    # no need to include all autogenerated files, we confidently recognize
    # autogenerated files. If it's not please let us know.
    # "/" will be replaced by current OS file path separator to properly work
    # on Windows.
    #skip-files:
    #  - quickxorhash.go # The file is copy from rclone project

    # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
    # If invoked with -mod=readonly, the go command is disallowed from the implicit
    # automatic updating of go.mod described above. Instead, it fails when any changes
    # to go.mod are needed. This setting is most useful to check that go.mod does
    # not need updates, such as in a continuous integration and testing system.
    # If invoked with -mod=vendor, the go command assumes that the vendor
    # directory holds the correct copies of dependencies and ignores
    # the dependency descriptions in go.mod.
    modules-download-mode: readonly
    # Allow multiple parallel golangci-lint instances running.
    # If false (default) - golangci-lint acquires file lock on start.
    allow-parallel-runners: false
    # there are still some linters not working with golangci-lint for go 1.18
    go: "1.23"
issues:
    # default is true. Enables skipping of directories:
    #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
    exclude-dirs-use-default: true
    # Excluding configuration per-path, per-linter, per-text and per-source
    exclude-rules:
        # skip gochecknoinits for agent main
        - path: main.go
          linters:
            - gochecknoinits
        # skip noctx for test files
        - path: _test\.go
          linters:
            - noctx
        # skip lll for go generate usage
        - linters:
            - lll
          source: "^//go:generate "
          #- linters:
          #    - revive
          #  path: _test\.go
          #  text: 'should replace .* \+= 1 with .*\+\+'
          #- linters:
          #    - revive
          #  path: _test\.go
          #  text: 'should replace .* -= 1 with .*--'
          ## ignore import _ "embed" complaints
          #- linters:
          #    - revive
          #  source: '_ "embed"'
          #- path: pkg/golinters/errcheck.go
          #  text: "SA1019: errCfg.Exclude is deprecated: use ExcludeFunctions instead"
          #- path: pkg/commands/run.go
          #  text: "SA1019: lsc.Errcheck.Exclude is deprecated: use ExcludeFunctions instead"
          #- path: pkg/commands/run.go
          #  text: "SA1019: e.cfg.Run.Deadline is deprecated: Deadline exists for historical compatibility and should not be used."
linters:
    # please, do not use `enable-all`: it's deprecated and will be removed soon.
    # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
    disable-all: true
    enable:
        - bodyclose
        - depguard
        - dogsled
        - errcheck
        # The linter 'exportloopref' is deprecated (since v1.60.2) due to: Since Go1.22 (loopvar) this linter is no longer relevant. Replaced by copyloopvar.
        - copyloopvar
        - exhaustive
        - funlen
        - gochecknoinits
        - goconst
        - gocritic
        - gofmt
        - goimports
        - mnd
        - goprintffuncname
        - gosec
        - gosimple
        - govet
        - ineffassign
        - lll
        - misspell
        - nakedret
        - noctx
        - nolintlint
        - rowserrcheck
        - staticcheck
        - stylecheck
        - thelper
        - typecheck
        - unconvert
        - unparam
        - unused
        - whitespace
        # disabled:
        #- asciicheck
        #- dupl       # not so useful
        #- gochecknoglobals
        #- gocognit
        #- gocyclo    # hard to fix
        #- godot
        #- godox
        #- goerr113
        #- interfacer
        #- maligned
        #- nestif
        #- prealloc
        #- revive     # TODO: check for rules
        #- scopelint
        #- testpackage
        #- tparallel  # TODO: useful but currently too many warnings
        #- wsl
        #- structcheck # deprecated, replaced by unused
        #- deadcode # deprecated, replaced by unused
        #- varcheck # deprecated, replaced by unused
# all available settings of specific linters
linters-settings:
    gofmt:
        rewrite-rules:
            - pattern: "interface{}"
              replacement: "any"
            - pattern: "a[b:len(a)]"
              replacement: "a[b:]"
    depguard:
        rules:
            main:
                files:
                    - $all
                deny:
                    - pkg: "github.com/sirupsen/logrus"
                      desc: "logging is standardised via yunikorn logger and zap"
                    - pkg: "github.com/stretchr/testify"
                      desc: "test assertions must use gotest.tools/v3/assert"
    dupl:
        threshold: 150
    funlen:
        lines: 200
        statements: 60
    goconst:
        min-len: 2
        min-occurrences: 3
    gocritic:
        enabled-tags:
            - diagnostic
            - experimental
            - opinionated
            - performance
            - style
        disabled-checks:
            - dupImport # https://github.com/go-critic/go-critic/issues/845
            - ifElseChain # suggests to change if-else chains to switch statements
            - singleCaseSwitch # suggests to change switch to if-else
            - docStub # suggests to add documentation to exported functions
            - octalLiteral
            - whyNoLint
            - wrapperFunc
            - paramTypeCombine # don't combine arugments with same type
    gocyclo:
        min-complexity: 20
    goimports:
        local-prefixes: github.com/golangci/golangci-lint
    mnd:
        # don't include the "operation" and "assign"
        checks:
            - argument
            - case
            - condition
            - return
        ignored-numbers:
            - "0"
            - "1"
            - "2"
            - "3"
        ignored-functions:
            - strings.SplitN
            #settings:
            #  mnd:
            #    ignored-files: 'pkg/microsoft/.*/error_info.go'
    govet:
        shadow: true
        settings:
            printf:
                funcs:
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
                    - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    lll:
        line-length: 140
    misspell:
        locale: US
    nolintlint:
        allow-unused: false # report any unused nolint directives
        require-explanation: false # don't require an explanation for nolint directives
        require-specific: false # don't require nolint directives to be specific about which linter is being skipped
    whitespace:
        multi-if: true
        multi-func: true
